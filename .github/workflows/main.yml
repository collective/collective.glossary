# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        plone-version: [5.2]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install flake8 pytest
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest

      - name: Install dependencies
        run: |
          sudo apt-get install libxml2-dev libxslt-dev
          pip install virtualenv wheel
          sudo apt-get install pkg-config libicu-dev
          pip install --no-binary=:pyicu: pyicu
      - uses: nanasess/setup-chromedriver@master
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            ~/buildout-cache
            ~/extends
            ~/.cache/pip
          # key: ${{ runner.os }}-buildout-${{ hashFiles('**/*.cfg') }}-${{ matrix.plone-version }}-${{ matrix.python-version }}
          key: ${{ runner.os }}-buildout-${{ matrix.plone-version }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-buildout-
      - name: setup buildout cache
        run: |
          mkdir -p ~/buildout-cache/{eggs,downloads}
          mkdir ~/.buildout
          echo "[buildout]" > $HOME/.buildout/default.cfg
          echo "download-cache = $HOME/buildout-cache/downloads" >> $HOME/.buildout/default.cfg
          echo "eggs-directory = $HOME/buildout-cache/eggs" >> $HOME/.buildout/default.cfg
      - name: bootstrap buildout
        run: |
          ./bootstrap.sh test_plone${{ matrix.plone-version }}.cfg
          bin/pip install zest.pocompile
          bin/pocompile
      - name: buildout
        run: |
          bin/buildout -t 10 -Nc test_plone${{ matrix.plone-version }}.cfg
      - name: test
        run: |
          export DISPLAY=:99.0
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional
          sleep 3
          bin/test --all
      - name: code-analysis
        run: echo "${{ matrix.plone-version }}" | grep ${{ matrix.plone-version }} || bin/code-analysis
      - name: Robot Ran
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./parts/test"
      - name: Artifact Robot Test Report
        if: failure() && steps.check_files.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v1
        with:
          name: test_results
          path: ./parts/test
      - uses: actions/setup-python@v2
        if: failure() && steps.check_files.outputs.files_exists == 'true'
        with:
          python-version: 2.7
      - name: Robottest report
        if: failure() && steps.check_files.outputs.files_exists == 'true'
        run: |
          pip2.7 install popt || pip2.7 install --user  popt
          grep  --include=output.xml -Rl  FAIL parts/test | xargs --no-run-if-empty -n 1 popt
      - name: createcoverage
        run: |
          export DISPLAY=:99.0
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional
          sleep 3
          bin/createcoverage -t '--all'
          # bin/createcoverage
          bin/coverage json -i
      - name: Coveralls Parallel
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true
          flag-name: ${{ matrix.plone-version }}-${{ matrix.python-version }}

  coveralls_finish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel-finished: true
